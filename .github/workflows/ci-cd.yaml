# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  # Build stage - runs on every push/PR
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for versioning

      - name: Generate version
        id: version
        uses: ./.github/actions/generate-version

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: |
          dotnet build \
            --configuration Release \
            --no-restore \
            -p:Version=${{ steps.version.outputs.version }}
            
      - name: Run unit tests
        run: |
          dotnet test --configuration Release --no-build \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --logger trx

      - name: Build and sign container
        id: build
        uses: ./.github/actions/build-container
        with:
          version: ${{ steps.version.outputs.version }}
          registry: ${{ env.REGISTRY }}
          image-name: ${{ env.IMAGE_NAME }}
          cosign-private-key: ${{ secrets.COSIGN_PRIVATE_KEY }}
          cosign-password: ${{ secrets.COSIGN_PASSWORD }}

  # Static analysis - runs on PR
  static-analysis:
    name: Static Code Analysis  
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run static analysis
        uses: ./.github/actions/static-analysis
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Dev deployment - automatic on main branch
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: development
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Dev Environment
        id: deploy
        uses: ./.github/actions/deploy-environment
        with:
          environment: dev
          image-digest: ${{ needs.build.outputs.image-digest }}
          kubeconfig: ${{ secrets.KUBECONFIG_DEV }}

  # Security scanning - runs after successful dev deployment
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SAST Scan
        uses: ./.github/actions/security-scan
        with:
          scan-type: sast
          image-digest: ${{ needs.build.outputs.image-digest }}
          snyk-token: ${{ secrets.SNYK_TOKEN }}

      - name: Dependency Check
        uses: ./.github/actions/security-scan
        with:
          scan-type: dependency
          image-digest: ${{ needs.build.outputs.image-digest }}
          snyk-token: ${{ secrets.SNYK_TOKEN }}

      - name: Container Scan
        uses: ./.github/actions/security-scan
        with:
          scan-type: container
          image-digest: ${{ needs.build.outputs.image-digest }}
          snyk-token: ${{ secrets.SNYK_TOKEN }}

  # Staging deployment - requires QA approval
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security team gate check
        uses: ./.github/actions/security-gate-check

      - name: Deploy to Staging Environment
        id: deploy
        uses: ./.github/actions/deploy-environment
        with:
          environment: staging
          image-digest: ${{ needs.build.outputs.image-digest }}
          kubeconfig: ${{ secrets.KUBECONFIG_STAGING }}

      - name: Run DAST Scan
        uses: ./.github/actions/security-scan
        with:
          scan-type: dast
          target-url: ${{ steps.deploy.outputs.url }}

      - name: Run UAT Tests
        uses: ./.github/actions/run-tests
        with:
          test-type: uat
          target-url: ${{ steps.deploy.outputs.url }}

      - name: Run Load Tests
        uses: ./.github/actions/run-tests
        with:
          test-type: load
          target-url: ${{ steps.deploy.outputs.url }}

      - name: Run Smoke Tests
        uses: ./.github/actions/run-tests
        with:
          test-type: smoke
          target-url: ${{ steps.deploy.outputs.url }}

  # Production deployment - requires SRE approval
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security team gate check
        uses: ./.github/actions/security-gate-check

      - name: Blue-Green Production Deployment
        id: deploy
        uses: ./.github/actions/blue-green-deploy
        with:
          image-digest: ${{ needs.build.outputs.image-digest }}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS_PROD }}
          app-service-name: ${{ vars.PROD_APP_SERVICE_NAME }}
          resource-group: ${{ vars.PROD_RESOURCE_GROUP }}
          rollback-on-failure: true

      - name: Post-deployment verification
        uses: ./.github/actions/run-tests
        with:
          test-type: smoke
          target-url: ${{ steps.deploy.outputs.url }}

      - name: Rollback on failure
        if: failure()
        uses: ./.github/actions/blue-green-deploy
        with:
          action: rollback
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS_PROD }}
          app-service-name: ${{ vars.PROD_APP_SERVICE_NAME }}
          resource-group: ${{ vars.PROD_RESOURCE_GROUP }}